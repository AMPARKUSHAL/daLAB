#include <iostream>
#include <vector>

// Merge function to combine two sorted vectors
std::vector<int> merge(const std::vector<int>& left, const std::vector<int>& right) {
    std::vector<int> merged;
    int i = 0, j = 0;

    while (i < left.size() && j < right.size()) {
        if (left[i] < right[j]) {
            merged.push_back(left[i]);
            i++;
        } else {
            merged.push_back(right[j]);
            j++;
        }
    }

    while (i < left.size()) {
        merged.push_back(left[i]);
        i++;
    }

    while (j < right.size()) {
        merged.push_back(right[j]);
        j++;
    }

    return merged;
}

// Merge Sort function
std::vector<int> mergeSort(const std::vector<int>& arr) {
    if (arr.size() <= 1) {
        return arr;
    }

    int mid = arr.size() / 2;
    std::vector<int> left(arr.begin(), arr.begin() + mid);
    std::vector<int> right(arr.begin() + mid, arr.end());

    left = mergeSort(left);
    right = mergeSort(right);

    return merge(left, right);
}

int main() {
    std::vector<int> mobileNumbers;

    std::cout << "Enter mobile numbers separated by spaces (e.g., 555 123 789): ";
    int number;
    while (std::cin >> number) {
        mobileNumbers.push_back(number);
    }

    // Sort the mobile numbers
    std::vector<int> sortedNumbers = mergeSort(mobileNumbers);

    // Display the sorted list
    std::cout << "Sorted mobile numbers:";
    for (int num : sortedNumbers) {
        std::cout << " " << num;
    }
    std::cout << std::endl;

    return 0;
}
